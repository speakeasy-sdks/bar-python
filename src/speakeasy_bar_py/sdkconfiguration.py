"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""


from ._hooks import SDKHooks
from .httpclient import AsyncHttpClient, HttpClient
from .utils import RetryConfig, remove_suffix
from dataclasses import dataclass, field
from enum import Enum
from pydantic import Field
from speakeasy_bar_py.models import components
from speakeasy_bar_py.types import OptionalNullable, UNSET
from typing import Callable, Dict, Optional, Tuple, Union


SERVER_PROD = "prod"
r"""The production server."""
SERVER_STAGING = "staging"
r"""The staging server."""
SERVER_CUSTOMER = "customer"
r"""A per-organization and per-environment API."""
SERVERS = {
	SERVER_PROD: "https://speakeasy.bar",
	SERVER_STAGING: "https://staging.speakeasy.bar",
	SERVER_CUSTOMER: "https://{organization}.{environment}.speakeasy.bar",
}
"""Contains the list of servers available to the SDK"""



class ServerEnvironment(str, Enum):
    r"""The environment name. Defaults to the production environment."""
    PROD = "prod"
    STAGING = "staging"
    DEV = "dev"

@dataclass
class SDKConfiguration:
    client: HttpClient
    async_client: AsyncHttpClient
    security: Optional[Union[components.Security,Callable[[], components.Security]]] = None
    server_url: Optional[str] = ""
    server: Optional[str] = ""
    server_defaults: Dict[str, Dict[str, str]] = field(default_factory=Dict)
    language: str = "python"
    openapi_doc_version: str = "1.0.0"
    sdk_version: str = "0.1.1"
    gen_version: str = "2.376.2"
    user_agent: str = "speakeasy-sdk/python 0.1.1 2.376.2 1.0.0 speakeasy-bar-py"
    retry_config: OptionalNullable[RetryConfig] = Field(default_factory=lambda: UNSET)
    timeout_ms: Optional[int] = None

    def __post_init__(self):
        self._hooks = SDKHooks()

    def get_server_details(self) -> Tuple[str, Dict[str, str]]:
        if self.server_url is not None and self.server_url:
            return remove_suffix(self.server_url, "/"), {}
        if not self.server:
            self.server = SERVER_PROD

        if self.server not in SERVERS:
            raise ValueError(f"Invalid server \"{self.server}\"")

        return SERVERS[self.server], self.server_defaults.get(self.server, {})


    def get_hooks(self) -> SDKHooks:
        return self._hooks
