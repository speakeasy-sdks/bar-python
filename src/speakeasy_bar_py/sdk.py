"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration, ServerEnvironment
from .utils.retries import RetryConfig
import httpx
from speakeasy_bar_py._hooks import SDKHooks
from speakeasy_bar_py.authentication import Authentication
from speakeasy_bar_py.config import Config
from speakeasy_bar_py.drinks import Drinks
from speakeasy_bar_py.ingredients import Ingredients
from speakeasy_bar_py.models import components
from speakeasy_bar_py.orders import Orders
from speakeasy_bar_py.types import OptionalNullable, UNSET
import speakeasy_bar_py.utils as utils
from typing import Callable, Dict, Optional, Union

class BarPython(BaseSDK):
    r"""The Speakeasy Bar: A bar that serves drinks.

    A secret underground bar that serves drinks to those in the know.
    https://docs.speakeasy.bar - The Speakeasy Bar Documentation.
    """
    authentication: Authentication
    r"""The authentication endpoints."""
    drinks: Drinks
    r"""The drinks endpoints."""
    ingredients: Ingredients
    r"""The ingredients endpoints."""
    orders: Orders
    r"""The orders endpoints."""
    config: Config
    def __init__(
        self,
        security: Optional[Union[components.Security, Callable[[], components.Security]]] = None,
        organization: Optional[str] = None,
        environment: Optional[ServerEnvironment] = None,
        server: Optional[str] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param security: The security details required for authentication
        :param organization: Allows setting the organization variable for url substitution
        :param environment: Allows setting the environment variable for url substitution
        :param server: The server by name to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        server_defaults = {
            "prod": {
            },
            "staging": {
            },
            "customer": {
                "organization": organization or "api",
                "environment": environment or "prod",
            },
        }
    

        BaseSDK.__init__(self, SDKConfiguration(
            client=client,
            async_client=async_client,
            security=security,
            server_url=server_url,
            server=server,
            server_defaults=server_defaults,
            retry_config=retry_config,
            timeout_ms=timeout_ms
        ))

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(current_server_url, self.sdk_configuration.client)
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()


    def _init_sdks(self):
        self.authentication = Authentication(self.sdk_configuration)
        self.drinks = Drinks(self.sdk_configuration)
        self.ingredients = Ingredients(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.config = Config(self.sdk_configuration)
    
