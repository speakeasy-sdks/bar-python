"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from speakeasy_bar_py._hooks import HookContext
from speakeasy_bar_py.models import components, errors, operations
from speakeasy_bar_py.types import BaseModel, Nullable, UNSET
import speakeasy_bar_py.utils as utils
from typing import Optional, Union

class Authentication(BaseSDK):
    r"""The authentication endpoints."""
    
    
    def authenticate(
        self,
        request: Union[operations.AuthenticateRequestBody, operations.AuthenticateRequestBodyTypedDict],
        retries: Optional[Nullable[utils.RetryConfig]] = UNSET,
        server_url: Optional[str] = None,
    ) -> operations.AuthenticateResponse:
        r"""Authenticate with the API by providing a username and password.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param accept_header_override: Override the default accept header for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AuthenticateRequestBody)
        
        req = self.build_request(
            method="POST",
            path="/authenticate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=False,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", operations.AuthenticateRequestBody),
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig("backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True)

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "5XX"
            ])                
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="authenticate", oauth2_scopes=["read:basic"], security_source=None),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        res = operations.AuthenticateResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[operations.AuthenticateResponseBody])
                res.object = out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401 or http_res.status_code >= 400 and http_res.status_code < 500:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.APIErrorData)
                out = errors.APIError(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        else:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Error])
                res.error = out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)

        return res
    
    
    async def authenticate_async(
        self,
        request: Union[operations.AuthenticateRequestBody, operations.AuthenticateRequestBodyTypedDict],
        retries: Optional[Nullable[utils.RetryConfig]] = UNSET,
        server_url: Optional[str] = None,
    ) -> operations.AuthenticateResponse:
        r"""Authenticate with the API by providing a username and password.

        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param accept_header_override: Override the default accept header for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.AuthenticateRequestBody)
        
        req = self.build_request(
            method="POST",
            path="/authenticate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=False,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", operations.AuthenticateRequestBody),
        )
        
        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config
            else:
                retries = utils.RetryConfig("backoff", utils.BackoffStrategy(500, 60000, 1.5, 3600000), True)

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, [
                "5XX"
            ])                
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="authenticate", oauth2_scopes=["read:basic"], security_source=None),
            request=req,
            error_status_codes=["401","4XX","5XX"],
            retry_config=retry_config
        )
        
        res = operations.AuthenticateResponse(http_meta=components.HTTPMetadata(request=req, response=http_res))
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[operations.AuthenticateResponseBody])
                res.object = out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401 or http_res.status_code >= 400 and http_res.status_code < 500:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.APIErrorData)
                out = errors.APIError(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        else:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Error])
                res.error = out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)

        return res
    
